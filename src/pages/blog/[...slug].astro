---
import { type CollectionEntry, getCollection } from "astro:content";
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/header/Header.astro";
import { SITE_DESCRIPTION } from "../../consts";
import FormattedDate from "../../components/blog/FormattedDate.astro";
import BlogLink from "../../components/blog/BlogLink.astro";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

type Props = CollectionEntry<"blog">;

const post = Astro.props;
const expandedSlug = post.slug;

// Get all blog posts
const posts = (await getCollection("blog")).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

// Find the expanded post and render its content
const expandedPost = posts.find((p) => p.slug === expandedSlug);
let ExpandedContent = null;

if (expandedPost) {
  const { Content } = await expandedPost.render();
  ExpandedContent = Content;
}

// Split posts into before/after current
const currentPostIndex = posts.findIndex((p) => p.slug === expandedSlug);
const beforePosts =
  currentPostIndex > 0 ? posts.slice(0, currentPostIndex) : [];
const afterPosts =
  currentPostIndex >= 0 ? posts.slice(currentPostIndex + 1) : [];

// Set up SEO title and description
const pageTitle = expandedPost
  ? `${expandedPost.data.title} |  Devs Love Coffee`
  : "Blog | Devs Love Coffee";
const pageDescription = expandedPost
  ? expandedPost.data.description
  : SITE_DESCRIPTION;
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead
      title={pageTitle}
      description={pageDescription}
      image={expandedPost?.data.image}
    />
  </head>
  <body>
    <Header />
    <main class="pb-(--space-l) min-h-screen mt-(--space-3xl)">
      <div class="w-full">
        {
          expandedPost && ExpandedContent && (
            <section class="my-(--space-m) px-(--space-s)">
              <div class="relative z-10">
                <div class="mt-(--space-s) rounded-(--border-radius) bg-background">
                  <article class="prose">
                    <div class="prose__title">
                      <h1>{expandedPost.data.title}</h1>
                      <div class="prose__title__date">
                        <FormattedDate date={expandedPost.data.pubDate} />
                        {expandedPost.data.updatedDate && (
                          <div class="prose__title__date__last-updated-on">
                            Last updated on{" "}
                            <FormattedDate
                              date={expandedPost.data.updatedDate}
                            />
                          </div>
                        )}
                      </div>
                    </div>
                    <div class="prose__content">
                      <ExpandedContent />
                    </div>
                  </article>
                </div>
              </div>
            </section>
          )
        }

        <h2 class="px-(--space-s) py-0">Read more</h2>
        {
          beforePosts.length > 0 && (
            <section class="mb-0">
              <ul class="blog-list">
                {beforePosts.map((post) => (
                  <li class="blog-item">
                    <BlogLink post={post} />
                  </li>
                ))}
              </ul>
            </section>
          )
        }

        {
          afterPosts.length > 0 && (
            <section class="mb-(--space-xl)">
              <ul class="blog-list">
                {afterPosts.map((post) => (
                  <li class="blog-item">
                    <BlogLink post={post} />
                  </li>
                ))}
              </ul>
            </section>
          )
        }
      </div>
    </main>

    <style lang="scss">
      .blog-list {
        width: 100%;
        list-style: none;
        padding: 0;
        margin: 0;
      }

      .blog-item {
        width: 100%;
        padding: 0 var(--space-s);
        position: relative;
        z-index: 1;
        transition: all 0.3s ease;

        &:after {
          transition: all 0.1s var(--easing);
          content: "";
          position: absolute;
          z-index: -1;
          bottom: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: url("data:image/svg+xml,%3Csvg viewBox='0 0 400 400' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.29' numOctaves='4' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E")
            var(--color-highlight-24);
          filter: brightness(120%);
          -webkit-mask-image: linear-gradient(
            90deg,
            rgba(0, 0, 0, 0) 0%,
            rgba(0, 0, 0, 1) 2%,
            rgba(0, 0, 0, 1) 98%,
            rgba(0, 0, 0, 0) 100%
          );
          mask-image: linear-gradient(
            90deg,
            rgba(0, 0, 0, 0) 0%,
            rgba(0, 0, 0, 1) 2%,
            rgba(0, 0, 0, 1) 98%,
            rgba(0, 0, 0, 0) 100%
          );
          opacity: 0;

          html[data-theme="dark"] & {
            background: url("data:image/svg+xml,%3Csvg viewBox='0 0 400 400' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.29' numOctaves='4' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E")
              var(--color-highlight-74);
          }
        }

        &:hover {
          &:after {
            opacity: 1;
            html[data-theme="dark"] &,
            html[data-theme="arc"] & {
              opacity: 0.35;
            }
          }
        }
      }

      .prose {
        width: min(100%, 45rem);
        margin: auto;

        &__title {
          margin-bottom: 1em;
          padding: 1em 0;
          text-align: center;
          line-height: 1;

          h1 {
            text-align: left;
            color: var(--color-highlight);
          }

          &__date {
            width: 100%;
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5em;
            color: var(--color-secondary);
            margin-top: var(--space-s);

            &__last-updated-on {
              font-style: italic;
            }
          }
        }

        &__content {
          margin: auto auto var(--space-3xl);
        }
      }
    </style>
  </body>
</html>
